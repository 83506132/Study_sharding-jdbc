server:
  port: 8001
spring:
  application:
    name: ultimate
  shardingsphere:
    props:
      sql:
        show: true
    datasource:
      names: p1,p2,s1,ps1,ps2,ss1
      p1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/product_db1
        password: 123456
        username: root
      p2:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/product_db2
        password: 123456
        username: root
      s1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/store_db
        password: 123456
        username: root
      ps1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/product_db1
        password: 123456
        username: root
      ps2:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/product_db2
        password: 123456
        username: root
      ss1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/store_db
        password: 123456
        username: root
    sharding:
      default-database-strategy:
        inline:
          sharding-column: store_info_id
          algorithm-expression: p$->{store_info_id  % 2 + 1}Ms
      # 配置绑定主要解决:笛卡尔积
      bindingTables:
        - product_info
        - product_describe
      tables:
        product_info:
          # 笛卡尔积:主要是乘基结果
          actualDataNodes: p$->{1..2}Ms.product_info$->{1..2}
          keyGenerator:
            type: SNOWFLAKE
            column: product_info_id
          tableStrategy:
            inline:
              shardingColumn: product_info_id
              algorithmExpression: product_info$->{product_info_id % 2 + 1}
        product_describe:
          # 笛卡尔积:主要是乘基结果
          actualDataNodes: p$->{1..2}Ms.product_describe$->{1..2}
          keyGenerator:
            type: SNOWFLAKE
            column: id
          tableStrategy:
            inline:
              shardingColumn: product_info_id
              algorithmExpression: product_describe$->{product_info_id % 2 + 1}
        store_info:
          actualDataNodes: sMs.store_info
          keyGenerator:
            type: SNOWFLAKE
            column: id
      master-slave-rules:
        sMs:
          masterDataSourceName: s1
          slaveDataSourceNames: ss1
        p1Ms:
          masterDataSourceName: p1
          slaveDataSourceNames: ps1
        p2Ms:
          masterDataSourceName: p2
          slaveDataSourceNames: ps2
      broadcast-tables:
        - region
